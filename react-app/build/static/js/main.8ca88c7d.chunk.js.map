{"version":3,"sources":["services.js","components/MyLocations.js","components/Signup.js","sun_image.png","components/Splash.js","App.js","reportWebVitals.js","index.js"],"names":["window","document","url","Services","getLocationByZip","zipcode","success","failure","reqOptions","$","ajax","getWeatherMetaData","lat","lng","requestOptions","done","fail","saveUserNameToDB","username","loginWithUserName","saveUserLocation","userid","getUserLocationsById","Locations","props","state","userWeather","locationInfo","debounceOut","zipTimeout","zipChange","clearTimeout","setTimeout","zip","querySelector","value","getLocationInfo","a","console","log","zipPattern","RegExp","test","alert","this","error","setState","locationData","city","getWeatherForAllLocations","userInfo","id","locations","map","location","weatherData","forcast","shortForecast","charAt","substring","toLowerCase","current","temperature","weatherPromises","Promise","all","res","saveLocation","prompt","type","name","onChange","readOnly","className","onClick","disabled","index","length","onLogout","React","Component","saveUserName","data","responseText","signupSuccess","signupFailure","login","loginSuccess","loginFailure","onLogin","Signup","methods","bind","Splash","src","logo","alt","target","rel","handler","App","showPage","loggedIn","pageChangeHandler","logout","page","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8ca88c7d.chunk.js","sourcesContent":["import $ from \"jquery\";\n\n// TODO: Refactor promises and callbacks into async/await\nlet apihost = \"localhost:8080\";\n\nif (window.document.url === \"brainsweatherapp.com\") {\n    apihost = \"brainsweatherapp.com\";\n}\n    \n\n// Gets a latitude, longitude, and other info based on zipcode\nfunction getLocationByZip(zipcode, success, failure) {\n    \n    const reqOptions = {\n        \"url\": \"/api/external/location/\"+zipcode,\n        \"dataType\": \"json\",\n        \"type\": \"GET\"\n    }\n    \n    return $.ajax(reqOptions)\n}\n\n// Poorly named, gets whether info, not metadata\n// TODO: rename\nfunction getWeatherMetaData(lat, lng, success, failure) {\n    const requestOptions = {\n        \"url\": \"/api/external/weather/\"+lat+\"/\"+lng,\n        \"dataType\": \"json\",\n        \"type\": \"GET\"\n    }\n    return $.ajax(requestOptions).done(success).fail(failure);\n}\n\n// Saves a new user to the database\n// TODO: remove \"location\"\nfunction saveUserNameToDB(username) {\n    const requestOptions = {\n        \"url\": \"/api/user/\",\n        \"dataType\": \"json\",\n        \"type\": \"POST\",\n        \"data\": {\n            username: username,\n        }\n    }\n\n    return $.ajax(requestOptions)\n}\n\n// Gets userid for unique username as login token\nfunction loginWithUserName(username, success, failure) {\n    const requestOptions = {\n        \"url\": \"/api/user/login/\"+username,\n        \"dataType\": \"json\",\n        \"type\": \"POST\",\n        \"data\": {\n            username: username,\n        }\n    }\n\n    return $.ajax(requestOptions);\n}\n\n// saves a location and the userid that signed in with that location\nfunction saveUserLocation(userid, zipcode, lat, lng, success, failure) {\n    const requestOptions = {\n        \"url\": \"/api/locations/\",\n        \"dataType\": \"json\",\n        \"type\": \"POST\",\n        \"data\": {\n            userid: userid,\n            zipcode: zipcode,\n            lat: lat,\n            lng: lng\n        }\n    }\n\n    return $.ajax(requestOptions).done(success).fail(failure);\n}\n\n// gets all locations for a given user, based on userid\nfunction getUserLocationsById(userid, success, failure) {\n    const reqOptions = {\n        \"url\": \"/api/locations/\"+userid,\n        \"dataType\": \"json\",\n        \"type\": \"GET\",\n    }\n    return $.ajax(reqOptions).done(success).fail(failure);\n}\n\nconst Services = {\n    getLocationByZip: getLocationByZip,\n    getWeatherMetaData: getWeatherMetaData,\n    saveUserNameToDB: saveUserNameToDB,\n    loginWithUserName: loginWithUserName,\n    saveUserLocation: saveUserLocation,\n    getUserLocationsById: getUserLocationsById\n}\n\nexport default Services;\n\n\n","import \"../styles.css\";\nimport Services from \"../services.js\"\nimport React from \"react\";\n\nfunction saveUserName() {\n\n}\n\nfunction login() {\n\n}\n\nclass Locations extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userWeather: []\n        }\n\n        // Set up some initial variables\n        this.locationInfo = null;\n        this.debounceOut = false;\n        this.zipTimeout = null;\n\n        // Function runs after key stroke in zip field.\n        // Function is debounced by 2 seconds\n        this.zipChange = () => {\n            if (this.zipTimeout) {\n                clearTimeout(this.zipTimeout);\n            }\n            this.zipTimeout = setTimeout(()=> {\n                let zip = document.querySelector(\"input[name='zipcode']\").value;\n                this.getLocationInfo(zip);\n            },2000);\n        };\n\n        // Api call to get city, state, lat, and lng from zipcode\n        this.getLocationInfo = async function getLocationInfo(zipcode) {\n            console.log(zipcode);\n            let zipPattern = new  RegExp('^[0-9]{5}$');\n            let validZip = zipPattern.test(zipcode);\n            if (!validZip) {\n                alert(\"Please enter a valid zipcode\")\n            } else {\n                try {\n                    this.locationInfo = await Services.getLocationByZip(zipcode);\n                } catch {\n                    console.error(\"No location returned for zipcode.\")\n                } \n                \n                if (this.locationInfo) {\n                    this.locationInfo.zipcode = zipcode;\n                    this.setState({\n                        locationData: this.locationInfo\n                    })\n                    console.log(this.locationInfo);\n                    document.querySelector(\"input[name='city']\").value = this.locationInfo.city;\n                    document.querySelector(\"input[name='state']\").value = this.locationInfo.state;\n                } else {\n                    alert(\"This zip did not return a location.\")\n                }\n\n            }\n        }\n\n        // Gets weather for all user locations, updates react state\n        this.getWeatherForAllLocations =   async function getWeatherForAllLocations() {\n\n            let locations = await Services.getUserLocationsById(props.userInfo.id)\n            let weatherPromises = await locations.map(async (location) => {\n                let weatherData = await Services.getWeatherMetaData(location.lat, location.lng)\n            \n                let forcast = weatherData[0].shortForecast\n                forcast = forcast.charAt(0) + forcast.substring(1).toLowerCase();\n\n                return { \n                    city: location.city,\n                    zipcode: location.zipcode,\n                    lat: location.lat,\n                    lng:location.lng,\n                    current:forcast,\n                    temperature: weatherData[0].temperature\n                }\n            });\n        \n            let res = await Promise.all(weatherPromises);\n            this.setState({\n                userWeather: res\n            })\n        }\n\n        // Saves a location with a username to the database\n        this.saveLocation = async ()=> {\n            if (this.props.userInfo) {\n                let savedLocation = await Services.saveUserLocation(this.props.userInfo.id, this.locationInfo.zipcode, this.locationInfo.lat, this.locationInfo.lng);\n                this.getWeatherForAllLocations();\n            } else {\n                prompt(\"Please try that again.\")\n            }\n \n        }\n    }\n\n    // When component loads/mounts, get all of that users locations\n    componentDidMount() {\n        this.getWeatherForAllLocations();\n    }\n\n    render() {\n \n        return (\n        <div id=\"signed-in\">\n            <h2>Congrats!</h2> \n            <h3>You are signed with username: <span id=\"signed-in-name\">{this.props.userInfo.username}</span>.</h3> \n            <div id=\"location-info\">\n                Zip: <input type=\"text\" name=\"zipcode\" onChange={this.zipChange} /><br />\n                City: <input type=\"text\" name=\"city\" readOnly /><br />\n                State: <input type=\"text\" name=\"state\" readOnly /><br />\n                <br/>      \n            </div>\n            <div id=\"location-buttons\">\n                <label>Is this the location you meant?</label>\n                <button className=\"btn fourth\" \n                        onClick={ () => {\n                            this.saveLocation()\n                        } }\n                        disabled={ (this.state.locationData && this.state.locationData.zipcode) ? false: true}\n                >Yes, check weather!</button><br/>\n            </div>\n            <div>\n                <h3>Your Saved Locations</h3>\n                {this.state.userWeather.map((value, index) => {\n                    return <p key={index}>{value.zipcode}: {value.current}, with a temperature of {value.temperature}.</p>\n                })}\n                {(!this.state.userWeather || this.state.userWeather.length === 0) ? <p> - You currently have no saved locations.</p> : ''}\n\n            </div>\n            <div id=\"logout-container\">\n                <button className=\"btn fourth\" onClick={this.props.onLogout}>Logout</button>\n            </div>\n        </div>)\n    }\n}\n\nexport default Locations","import \"../styles.css\";\nimport Services from \"../services.js\";\nimport React from \"react\";\n\n// Makes api call to save a user to the database\nasync function saveUserName() {\n    let username = document.querySelector(\"#userinput\").value;\n    let data;\n\n    try {\n        data = await Services.saveUserNameToDB(username);\n    } catch(e) {\n        console.log(\"Error caught\", e.responseText);\n    }\n\n    if (data) {\n        this.setState({\n            signupSuccess : true,\n            signupFailure : false\n        })\n    \n    } else {\n        this.setState({\n            signupFailure : true,\n            signupSuccess : false\n        })\n \n    }\n}\n\n// Tries to login in, sets the state depending on if it works\nasync function login() {\n    let data, username\n    username = document.querySelector('#userlogin').value;\n\n    try {\n        data = await Services.loginWithUserName(username);\n    } catch(e) {\n       // Doesn't work, for some reason \n    }\n    \n    if (data) {\n        this.setState({\n            loginSuccess: true,\n            loginFailure: false\n        })\n        this.props.onLogin(data);\n    } else {\n        this.setState({\n            loginSuccess: false,\n            loginFailure: true\n        })\n        \n    }\n}\n\n\n\n\n\nclass Signup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            signupSuccess: false,\n            signupFailure: false,\n            loginSuccess: false,\n            loginFailure: false\n        }\n        this.methods = {\n            login: login.bind(this),\n            saveUserName: saveUserName.bind(this)\n        }\n    }\n\n    render() {\n        return (    \n            <div id=\"login-container\">\n                <h1>Brian's Weather App</h1>\n                <div id=\"signinlogin\">\n                    <p>Sign Up Below:</p>\n                    <div id=\"style-fields\">\n                        <fieldset>\n                            <label>Username:</label>\n                            <input type=\"text\" id=\"userinput\"></input>\n                            <button onClick={this.methods.saveUserName}>Save</button><br/>\n                            {(this.state.signupSuccess) ? <p className=\"success\" id=\"save-user-success\">Congrats! You can sign in now!</p> : ''}\n                            {(this.state.signupFailure) ?  <p className=\"error\" id=\"save-user-error\">Error. You may already have an account. Try signing in.</p> : '' }                   \n                        </fieldset>\n                        <fieldset>\n                            <label>Login:</label>\n                            <input type=\"text\" id=\"userlogin\"></input>\n                            <button onClick={this.methods.login}>Login</button>\n                            {(this.state.loginFailure) ?  <p className=\"error\" id=\"save-user-error\">Error. Have you signed up?</p> : '' }  \n                        </fieldset>\n                    </div>\n\n                </div>\n        </div>\n            )\n        }\n}\n\nexport default Signup","export default __webpack_public_path__ + \"static/media/sun_image.a7748eec.png\";","import logo from '../sun_image.png';\n\n// This is a simple component, redirects traffic to the login page\nfunction Splash(props){\n    return (    \n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Brian's Weather App</h1>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <a\n                    id=\"sign-up-link\"\n                    className=\"App-link\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    onClick={()=> {\n                        props.handler(\"signup\")\n                    }}\n                >\n                Sign Up\n                </a>\n            </header>\n        </div>\n  )\n}\n\nexport default Splash","\nimport './App.css';\n\nimport MyLocation from './components/MyLocations.js'\nimport Signup from './components/Signup.js'\nimport Splash from './components/Splash.js'\nimport React from 'react';\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n\n    this.state = {\n      showPage: \"splash\",\n      loggedIn: false,\n      userInfo: null\n    };\n    \n    // The functions are handed down into components as props\n    // to allow page changes\n    this.pageChangeHandler = (name) => {\n          this.setState({\n            showPage: name\n          })\n    }\n    this.login = (userInfo) => {\n        this.setState({\n          loggedIn: true,\n          userInfo: userInfo\n        })\n        this.pageChangeHandler('locations')\n    }\n    this.logout = () => {\n        this.setState({\n          userInfo: null\n        })\n        this.pageChangeHandler('splash')\n    }\n      \n  }\n\n\n  render( ) {\n\n  // Routing is done with simple if statements. Depending on the state \n  // show a  specific component\n\n  let page;\n    \n  if (this.state.showPage === \"splash\") {\n    page = <Splash handler={this.pageChangeHandler}></Splash>\n  } \n\n  if (this.state.showPage === \"signup\") {\n    page = <Signup \n            handler={this.pageChangeHandler}\n            onLogin={this.login}\n          ></Signup>\n  } \n\n  if (this.state.showPage === \"locations\") {\n    page = <MyLocation \n            handler={this.pageChangeHandler}\n            userInfo={this.state.userInfo}\n            onLogout={this.logout}\n          ></MyLocation>\n  }\n\n\n\n      return page;\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// The app is rendered to #root\nReactDOM.render(\n  <React.StrictMode>\n    <App page=\"splash\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}